int getSum(int a, int b){
    while(b){
        //求进位值，两数相与，需要进位的地方为1，
        //不需要进位的地方为0，再左移动一位即可
        int c = (unsigned int)(a & b) << 1;
        //两数异或将值放入其中一个种
        a = a ^ b;
        //另一个值用进位值替换
        b = c;
    }

    return a;
}
//位运算，利用了异或和与运算的特点，异或操作其实包含了加法的性质，
//即二进制位上同0为0，不同为1，区别在于加法的情况同1进位置0，
//而异或的情况同1置0，所以只需要找出进位的位置，
//再将进位值和之前异或的值进行异或，直到进位值为0即可，
//而进位的位置则使用与运算实现，因为与运算只有同1的时候才是1，
//所以两个数相与，需要进位的地方为1，其余为0，这时候只需要将其左移一位，
//得到的就是可以直接之前值异或的进位值了，
//千万注意，由于inx型的最高位为正负标志位，所以必须先强转位无符号，才能左移